(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{613:function(s,t,a){s.exports=a.p+"assets/img/20201122134001.0d972506.png"},726:function(s,t,a){"use strict";a.r(t);var n=a(7),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h2",{attrs:{id:"_1-基本概念与术语"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-基本概念与术语"}},[s._v("#")]),s._v(" 1 基本概念与术语")]),s._v(" "),n("h3",{attrs:{id:"_1-1-进程与线程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-进程与线程"}},[s._v("#")]),s._v(" 1.1 进程与线程")]),s._v(" "),n("p",[n("strong",[s._v("1.基础定义")])]),s._v(" "),n("p",[s._v("进程是操作系统进行资源分配和管理的最小独立单元，而线程则是CPU调度与执行的最小单位。二者存在明确的包含关系：一个进程由一个或多个协同工作的线程构成。")]),s._v(" "),n("p",[n("strong",[s._v("2.核心差异")])]),s._v(" "),n("p",[n("strong",[s._v("隔离性")]),s._v("：进程拥有完全独立的地址空间（包括代码段、数据段和堆栈），进程间切换需要保存/恢复完整的上下文环境，因而产生较高的系统开销。线程共享所属进程的代码和全局数据，但每个线程维护独立的调用栈和程序计数器（PC），这使得线程上下文切换仅需保存少量寄存器状态，显著降低开销。")]),s._v(" "),n("p",[n("strong",[s._v("执行本质")]),s._v("：进程作为资源容器，承载着正在运行的应用程序；线程则是该容器内的实际执行单元。现代操作系统通过时间片轮转机制，使多线程呈现出”并发执行”的假象（如视频应用中视频解码线程与用户交互线程的并行处理）。")]),s._v(" "),n("p",[n("strong",[s._v("3.稳定性特征")])]),s._v(" "),n("p",[s._v("进程具备强隔离性，单个进程崩溃通常不会引发系统级连锁反应；而线程作为共享内存空间的执行流，某个线程的未捕获异常可能导致整个进程终止。")]),s._v(" "),n("p",[n("strong",[s._v("4.Java实现特性")])]),s._v(" "),n("p",[s._v("在Java虚拟机中，线程作为程序执行的最小调度单元，虽然共享进程的堆内存和方法区等资源，但每个线程都拥有独立的程序计数器、虚拟机栈和本地方法栈，这种设计既保证了执行流的独立性，又实现了高效的内存资源共享。")]),s._v(" "),n("h3",{attrs:{id:"_1-2-并行与并发"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-并行与并发"}},[s._v("#")]),s._v(" 1.2 并行与并发")]),s._v(" "),n("p",[s._v("串行：在"),n("strong",[s._v("同一时刻")]),s._v("，有"),n("strong",[s._v("一个任务")]),s._v("在"),n("strong",[s._v("单个CPU")]),s._v("上"),n("strong",[s._v("依次执行")]),s._v("。")]),s._v(" "),n("p",[s._v("并行：在"),n("strong",[s._v("同一时刻")]),s._v("，有"),n("strong",[s._v("多个任务")]),s._v("在"),n("strong",[s._v("多个CPU")]),s._v("上"),n("strong",[s._v("同时执行")]),s._v("。")]),s._v(" "),n("p",[s._v("并发：在"),n("strong",[s._v("同一时刻")]),s._v("，有"),n("strong",[s._v("多个任务")]),s._v("在"),n("strong",[s._v("单个CPU")]),s._v("上"),n("strong",[s._v("交替执行")]),s._v("。")]),s._v(" "),n("h3",{attrs:{id:"_1-3-线程调度"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-线程调度"}},[s._v("#")]),s._v(" 1.3 线程调度")]),s._v(" "),n("h4",{attrs:{id:"_1-3-1-线程并发执行"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-1-线程并发执行"}},[s._v("#")]),s._v(" 1.3.1 线程并发执行")]),s._v(" "),n("p",[s._v("计算机中的CPU，在任意时刻只能执行一条机器指令，每个线程只有获得CPU的使用权才能执行代码。各个线程轮流获得CPU的使用权，分别执行各自的任务。")]),s._v(" "),n("h4",{attrs:{id:"_1-3-2-线程调度模型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-2-线程调度模型"}},[s._v("#")]),s._v(" 1.3.2 线程调度模型")]),s._v(" "),n("p",[s._v("分时调度模型：所有线程轮流使用CPU的使用权，平均分配每个线程占用CPU时间片。\n抢占式调度模型：优先让优先级高的线程使用CPU，如果线程的优先级相同，那么会随机选取一个，优先级高的线程获取CPU的时间片相对多一些。")]),s._v(" "),n("h3",{attrs:{id:"_1-4-可重入锁"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-可重入锁"}},[s._v("#")]),s._v(" 1.4 可重入锁")]),s._v(" "),n("p",[s._v("JVM允许同一个线程重复获取同一个锁，被同一个线程反复获取的锁，叫做可重入锁。")]),s._v(" "),n("h3",{attrs:{id:"_1-5-死锁"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-死锁"}},[s._v("#")]),s._v(" 1.5 死锁")]),s._v(" "),n("p",[s._v("线程死锁，是由于两个或更多的线程互相持有对方所需要的资源，导致这些线程处于等待状态，无法继续执行。")]),s._v(" "),n("p",[s._v("死锁是因为锁的嵌套产生的，所以避免死锁的根本就是要避免锁的嵌套。多线程获取锁的顺序要一致。")]),s._v(" "),n("h2",{attrs:{id:"_2-创建线程的方式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-创建线程的方式"}},[s._v("#")]),s._v(" 2 创建线程的方式")]),s._v(" "),n("h3",{attrs:{id:"_2-1-继承thread类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-继承thread类"}},[s._v("#")]),s._v(" 2.1 继承Thread类")]),s._v(" "),n("p",[s._v("继承Thread类，并重写run方法。")]),s._v(" "),n("h3",{attrs:{id:"_2-2-实现runnable接口"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-实现runnable接口"}},[s._v("#")]),s._v(" 2.2 实现Runnable接口")]),s._v(" "),n("p",[s._v("实现Runnable接口，并重写run方法。")]),s._v(" "),n("h3",{attrs:{id:"_2-3-实现callable接口"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-实现callable接口"}},[s._v("#")]),s._v(" 2.3 实现Callable接口")]),s._v(" "),n("p",[s._v("实现Callable接口，并重写call方法。")]),s._v(" "),n("p",[s._v("call方法有返回值的，可以抛出异常。Callable接口支持泛型。实现Callable接口的派生类需要结合FutureTask一起使用。")]),s._v(" "),n("p",[s._v("JDK5新增的。")]),s._v(" "),n("blockquote",[n("ul",[n("li",[s._v("Future可以对Runnable、Callable任务的执行结果进行取消、查询是否完成、获取结果等。")]),s._v(" "),n("li",[s._v("FutureTask是Future接口唯一的实现类")]),s._v(" "),n("li",[s._v("FutureTask同时实现了Runnable、Future接口。它既可以作为Runnable被线程执行，又可以作为Future得到Callable的返回值。")])])]),s._v(" "),n("h3",{attrs:{id:"_2-4-线程池"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-线程池"}},[s._v("#")]),s._v(" 2.4 线程池")]),s._v(" "),n("h4",{attrs:{id:"_2-4-1-创建线程池"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-1-创建线程池"}},[s._v("#")]),s._v(" 2.4.1 创建线程池")]),s._v(" "),n("h4",{attrs:{id:"_2-4-2-使用线程池"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-2-使用线程池"}},[s._v("#")]),s._v(" 2.4.2 使用线程池")]),s._v(" "),n("h4",{attrs:{id:"_2-4-3-线程池参数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-3-线程池参数"}},[s._v("#")]),s._v(" 2.4.3 线程池参数")]),s._v(" "),n("p",[s._v("创建自定义线程池时需要设置以下核心参数：")]),s._v(" "),n("ul",[n("li",[s._v("‌**核心线程数(corePoolSize)**‌：线程池初始化时创建的线程数量")]),s._v(" "),n("li",[s._v("‌**最大线程数(maxPoolSize)**‌：线程池允许的最大线程数量")]),s._v(" "),n("li",[s._v("‌**队列容量(queueCapacity)**‌：任务缓存队列的大小")]),s._v(" "),n("li",[s._v("‌**线程空闲时间(keepAliveSeconds)**‌：超出核心线程数的线程空闲时被销毁的等待时间")]),s._v(" "),n("li",[s._v("‌**线程名前缀(threadNamePrefix)**‌：便于监控和调试")]),s._v(" "),n("li",[s._v("‌**拒绝策略(rejectedExecutionHandler)**‌：当线程池和队列都满时的处理方式")])]),s._v(" "),n("h4",{attrs:{id:"_2-4-4-线程池拒绝策略"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-4-线程池拒绝策略"}},[s._v("#")]),s._v(" 2.4.4 线程池拒绝策略")]),s._v(" "),n("p",[s._v("线程池的拒绝策略在任务提交数超过(最大线程数 + 队列容量)时被触发。")]),s._v(" "),n("p",[s._v("JDK内置了四种拒绝策略：")]),s._v(" "),n("ul",[n("li",[s._v("‌"),n("strong",[s._v("AbortPolicy")]),s._v("‌：默认，丢弃任务并抛出异常。适用于需要立即感知任务被拒绝的场景，通过异常提醒系统过载。")]),s._v(" "),n("li",[s._v("‌"),n("strong",[s._v("CallerRunsPolicy")]),s._v("‌：由提交任务的线程自行执行该任务。适用于不能丢弃任何任务，但能接受提交线程性能下降的场景。")]),s._v(" "),n("li",[s._v("‌"),n("strong",[s._v("DiscardPolicy")]),s._v("‌：丢弃任务但不抛出异常。适用于可容忍任务丢失且不希望抛出异常的场景。")]),s._v(" "),n("li",[s._v("‌"),n("strong",[s._v("DiscardOldestPolicy")]),s._v("‌：丢弃队列最前面的任务，然后重试提交当前任务。适用于希望尝试执行最新任务的场景。")])]),s._v(" "),n("p",[s._v("当内置策略不满足需求时，可以实现"),n("code",[s._v("RejectedExecutionHandler")]),s._v("接口来自定义策略。例如，以下自定义策略在丢弃任务前会记录日志：")]),s._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("CustomDiscardPolicy")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("implements")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RejectedExecutionHandler")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" factoryName"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("CustomDiscardPolicy")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" factoryName"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("factoryName "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" factoryName"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("rejectedExecution")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Runnable")]),s._v(" r"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ThreadPoolExecutor")]),s._v(" executor"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("executor"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("isShutdown")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Runnable")]),s._v(" poll "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" executor"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("getQueue")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("poll")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 丢弃队列头部任务")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("err"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"["')]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("factoryName "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"] task will be discard: "')]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" poll"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            executor"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("execute")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("r"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("                          "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 重试提交当前任务")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br")])]),n("h4",{attrs:{id:"_2-4-5-线程池配置和使用误区"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-5-线程池配置和使用误区"}},[s._v("#")]),s._v(" 2.4.5 线程池配置和使用误区")]),s._v(" "),n("p",[n("strong",[s._v("在线程池配置和使用过程中，确实存在一些常见的误区，这些误区可能导致内存溢出、性能下降甚至系统崩溃。")])]),s._v(" "),n("p",[n("strong",[s._v("使用Executors快捷创建线程池")]),s._v("：直接使用"),n("code",[s._v("Executors")]),s._v("的"),n("code",[s._v("newFixedThreadPool")]),s._v("、"),n("code",[s._v("newCachedThreadPool")]),s._v("等方法创建线程池是常见的错误。这些方法创建的线程池要么使用无界队列（如"),n("code",[s._v("LinkedBlockingQueue")]),s._v("），任务无限堆积可能导致内存溢出（OOM）；要么允许创建的线程数量为"),n("code",[s._v("Integer.MAX_VALUE")]),s._v("，可能耗尽系统资源。正确的做法是手动通过"),n("code",[s._v("ThreadPoolExecutor")]),s._v("的构造函数来声明线程池，明确指定核心线程数、最大线程数、队列类型及容量、拒绝策略等参数。")]),s._v(" "),n("p",[n("strong",[s._v("线程池参数设置不合理")]),s._v("：随意配置线程池参数是另一个常见问题。例如，核心线程数设置过小可能导致任务处理不及时，而设置过大又可能造成资源浪费；最大线程数设置过高，在突发流量下可能创建过多线程，同样有耗尽资源的风险。合理的配置需要根据机器的性能、业务场景（如CPU密集型或I/O密集型）来调整。")]),s._v(" "),n("p",[n("strong",[s._v("线程池拒绝策略选择不当")]),s._v("：如果未根据业务特点选择合适的拒绝策略，当任务无法被处理时，可能会影响系统稳定性。例如，默认的"),n("code",[s._v("AbortPolicy")]),s._v("会直接抛出异常，而"),n("code",[s._v("CallerRunsPolicy")]),s._v("则会让调用线程执行任务，起到一定的缓冲作用。")]),s._v(" "),n("p",[n("strong",[s._v("共享线程池的风险")]),s._v("：在项目中共享同一个线程池处理所有异步任务存在风险。如果次要逻辑的任务执行缓慢或阻塞，可能会占用大量线程资源，从而拖垮主要逻辑，导致系统性能下降。")]),s._v(" "),n("p",[n("strong",[s._v("线程池中的异常丢失")]),s._v("：在线程池中执行任务时，如果任务内部发生了异常但没有被捕获，这个异常可能会“消失”，导致问题难以追踪和排查。")]),s._v(" "),n("p",[n("strong",[s._v("线程池命名与监控缺失")]),s._v("：使用线程池时没有自定义命名，会给问题排查带来困难。同时，缺乏对线程池运行状态的监控（如活跃线程数、队列长度），使得无法及时发现潜在的性能问题或资源瓶颈。")]),s._v(" "),n("p",[n("strong",[s._v("ThreadLocal与线程池搭配的风险")]),s._v("：由于线程池会复用线程，如果在任务中使用了"),n("code",[s._v("ThreadLocal")]),s._v("，并且在使用后没有及时清理，可能会导致后续任务获取到错误的信息，造成数据混乱。")]),s._v(" "),n("p",[n("strong",[s._v("线程池忘记关闭")]),s._v("：在一些需要手动管理线程池生命周期的场景下，使用完线程池后忘记调用"),n("code",[s._v("shutdown")]),s._v("方法，可能导致线程无法被回收，造成资源泄漏。")]),s._v(" "),n("h2",{attrs:{id:"_3-线程的生命周期"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-线程的生命周期"}},[s._v("#")]),s._v(" 3 线程的生命周期")]),s._v(" "),n("p",[n("img",{attrs:{src:a(613),alt:""}})]),s._v(" "),n("p",[s._v("线程从创建到销毁会经历以下 "),n("strong",[s._v("5 种核心状态")]),s._v("，其转换关系如下：")]),s._v(" "),n("ol",[n("li",[n("p",[n("strong",[s._v("新建（NEW）")])]),s._v(" "),n("ul",[n("li",[n("strong",[s._v("触发条件")]),s._v("：通过 "),n("code",[s._v("new")]),s._v(" 关键字创建 "),n("code",[s._v("Thread")]),s._v(" 对象，但尚未调用 "),n("code",[s._v("start()")]),s._v(" 方法。")]),s._v(" "),n("li",[n("strong",[s._v("特点")]),s._v("：线程对象已存在，但尚未进入调度队列，不占用 CPU 资源。")])])]),s._v(" "),n("li",[n("p",[n("strong",[s._v("就绪（RUNNABLE）")])]),s._v(" "),n("ul",[n("li",[n("strong",[s._v("触发条件")]),s._v("：\n"),n("ul",[n("li",[s._v("调用 "),n("code",[s._v("start()")]),s._v(" 方法，线程进入可运行状态；")]),s._v(" "),n("li",[s._v("从 "),n("strong",[s._v("阻塞（BLOCKED）")]),s._v(" 或 "),n("strong",[s._v("等待（WAITING/TIMED_WAITING）")]),s._v(" 状态恢复（如 "),n("code",[s._v("sleep()")]),s._v(" 时间到、I/O 操作完成、锁获取成功）。")])])]),s._v(" "),n("li",[n("strong",[s._v("特点")]),s._v("：线程已准备好执行，等待 CPU 调度，但尚未真正运行。")])])]),s._v(" "),n("li",[n("p",[n("strong",[s._v("运行（RUNNING）")])]),s._v(" "),n("ul",[n("li",[n("strong",[s._v("触发条件")]),s._v("：线程调度器（OS）选中该线程，并分配 CPU 时间片。")]),s._v(" "),n("li",[n("strong",[s._v("特点")]),s._v("：线程实际执行 "),n("code",[s._v("run()")]),s._v(" 方法中的代码，是 "),n("strong",[s._v("RUNNABLE 状态的子集")]),s._v("（即只有获得 CPU 的 RUNNABLE 线程才处于 RUNNING 状态）。")])])]),s._v(" "),n("li",[n("p",[n("strong",[s._v("阻塞（BLOCKED / WAITING / TIMED_WAITING）")])]),s._v(" "),n("ul",[n("li",[n("strong",[s._v("触发条件")]),s._v("：\n"),n("ul",[n("li",[n("strong",[s._v("BLOCKED")]),s._v("：线程尝试获取 "),n("strong",[s._v("对象锁（synchronized）")]),s._v(" 但锁被其他线程占用；")]),s._v(" "),n("li",[n("strong",[s._v("WAITING")]),s._v("：调用 "),n("code",[s._v("wait()")]),s._v("、"),n("code",[s._v("join()")]),s._v(" 等方法，线程进入无限期等待，直到被 "),n("code",[s._v("notify()")]),s._v("/"),n("code",[s._v("notifyAll()")]),s._v(" 唤醒；")]),s._v(" "),n("li",[n("strong",[s._v("TIMED_WAITING")]),s._v("：调用 "),n("code",[s._v("sleep(ms)")]),s._v("、"),n("code",[s._v("wait(ms)")]),s._v("、"),n("code",[s._v("join(ms)")]),s._v(" 等带超时的方法，线程进入限时等待。")])])]),s._v(" "),n("li",[n("strong",[s._v("特点")]),s._v("：线程暂停执行，不占用 CPU，直到满足特定条件（如锁释放、超时、外部唤醒）。")])])]),s._v(" "),n("li",[n("p",[n("strong",[s._v("死亡（DEAD / TERMINATED）")])]),s._v(" "),n("ul",[n("li",[n("strong",[s._v("触发条件")]),s._v("：\n"),n("ul",[n("li",[n("code",[s._v("run()")]),s._v(" 方法执行完毕；")]),s._v(" "),n("li",[s._v("线程抛出未捕获的异常；")]),s._v(" "),n("li",[s._v("调用 "),n("code",[s._v("stop()")]),s._v("（已废弃，不推荐使用）。")])])]),s._v(" "),n("li",[n("strong",[s._v("特点")]),s._v("：线程生命周期结束，无法再次启动（"),n("code",[s._v("start()")]),s._v(" 会抛出 "),n("code",[s._v("IllegalThreadStateException")]),s._v("）。")])])])]),s._v(" "),n("h2",{attrs:{id:"_4-线程的安全问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-线程的安全问题"}},[s._v("#")]),s._v(" 4 线程的安全问题")]),s._v(" "),n("p",[s._v("解决线程之间共享数据的安全问题有以下3种方式。")]),s._v(" "),n("h3",{attrs:{id:"_4-1-使用volatile"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-使用volatile"}},[s._v("#")]),s._v(" 4.1 使用volatile")]),s._v(" "),n("p",[s._v("volatile关键字解决的是可见性问题：当一个线程修改了某个共享变量的值，其他线程能够立刻看到修改后的值。")]),s._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("volatile")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" myVar "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h3",{attrs:{id:"_4-2-使用synchronized"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-使用synchronized"}},[s._v("#")]),s._v(" 4.2 使用synchronized")]),s._v(" "),n("p",[s._v("同步代码块")]),s._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("synchronized")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("lock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 业务逻辑")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("同步方法")]),s._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("synchronized")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("myMethod")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 业务逻辑")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("h3",{attrs:{id:"_4-3-使用reentrantlock"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-使用reentrantlock"}},[s._v("#")]),s._v(" 4.3 使用ReentrantLock")]),s._v(" "),n("p",[s._v("Lock，JDK5新增的")]),s._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Lock")]),s._v(" lock "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ReentrantLock")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    lock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("lock")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 业务逻辑")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("finally")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    lock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("unlock")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("h3",{attrs:{id:"_4-4-几种方式比较"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-几种方式比较"}},[s._v("#")]),s._v(" 4.4 几种方式比较")]),s._v(" "),n("p",[s._v("volatile关键字解决的是可见性问题：当一个线程修改了某个共享变量的值，其他线程能够立刻看到修改后的值。")]),s._v(" "),n("p",[s._v("synchronized是独占锁，加锁和解锁的过程自动进行，易于操作，但不够灵活。")]),s._v(" "),n("p",[s._v("ReentrantLock也是独占锁，加锁和解锁的过程需要手动进行，不易操作，但非常灵活。")]),s._v(" "),n("h2",{attrs:{id:"_5-线程通信的应用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-线程通信的应用"}},[s._v("#")]),s._v(" 5 线程通信的应用")]),s._v(" "),n("p",[n("strong",[s._v("生产者消费者模式")]),s._v("，也叫"),n("strong",[s._v("等待唤醒机制")]),s._v("，是一个非常经典的"),n("strong",[s._v("多线程协作模式")]),s._v("。")]),s._v(" "),n("p",[s._v("一个线程负责生产数据，放到共享区域，然后通知另一个线程去消耗数据。")]),s._v(" "),n("ol",[n("li",[n("p",[n("strong",[s._v("synchronized + wait + notify 实现多线程协调")])]),s._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("synchronized")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("send")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("InterruptedException")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("条件"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 业务逻辑")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("notify")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("wait")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])])]),s._v(" "),n("li",[n("p",[n("strong",[s._v("Lock + Condition 实现多线程协调")])]),s._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Lock")]),s._v(" lock "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ReentrantLock")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Condition")]),s._v(" condition "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" lock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("newCondition")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("send")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("InterruptedException")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        lock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("lock")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("条件"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 业务逻辑")]),s._v("\n            condition"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("signal")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 相当notify")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            condition"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("await")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 相当于wait")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("finally")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        lock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("unlock")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br")])])])]),s._v(" "),n("blockquote",[n("p",[s._v("Condition提供的await()、signal()、signalAll()原理和synchronized锁对象的wait()、notify()、notifyAll()是一致的，并且其行为也是一样的")])]),s._v(" "),n("h2",{attrs:{id:"_6-扩展知识"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-扩展知识"}},[s._v("#")]),s._v(" 6 扩展知识")]),s._v(" "),n("h3",{attrs:{id:"sleep-和-wait-的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#sleep-和-wait-的区别"}},[s._v("#")]),s._v(" sleep 和 wait 的区别")]),s._v(" "),n("p",[s._v("相同点：")]),s._v(" "),n("ul",[n("li",[s._v("调用sleep或wait，线程都会进入阻塞状态。")])]),s._v(" "),n("p",[s._v("不同点：")]),s._v(" "),n("ol",[n("li",[s._v("声明位置不同：Thread类中声明sleep，Object类中声明wait；")]),s._v(" "),n("li",[s._v("调用位置不同：sleep在任何地方都可以使用，wait只能用在同步代码块或者同步方法中；")]),s._v(" "),n("li",[s._v("关于是否释放同步监听器：如果两个方法都用在同步代码块或者同步方法中，sleep不会释放，wait会释放。")])]),s._v(" "),n("h3",{attrs:{id:"wait、notify、notifyall"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#wait、notify、notifyall"}},[s._v("#")]),s._v(" wait、notify、notifyAll")]),s._v(" "),n("ol",[n("li",[n("p",[s._v("三个方法都是定义在Object类中；")])]),s._v(" "),n("li",[n("p",[s._v("三个方法只能使用在同步代码块或同步方法中；")])]),s._v(" "),n("li",[n("p",[s._v("三个方法的调用者必须是同步代码块或同步方法中的同步监听器；")])]),s._v(" "),n("li",[n("p",[s._v("一旦调用wait方法，线程就会进入阻塞状态，释放同步监听器；")])]),s._v(" "),n("li",[n("p",[s._v("一旦调用notify方法，就会唤醒被wait的一个线程。如果有多个线程被wait，就唤醒优先级最高的那个；")])]),s._v(" "),n("li",[n("p",[s._v("一旦调用notifyAll方法，就会唤醒所有被wait的线程。")])])]),s._v(" "),n("h2",{attrs:{id:"参考资料"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[s._v("#")]),s._v(" 参考资料")]),s._v(" "),n("p",[n("a",{attrs:{href:"https://www.liaoxuefeng.com/wiki/1252599548343744/1255943750561472",target:"_blank",rel:"noopener noreferrer"}},[s._v("多线程 - 廖雪峰的官网网站"),n("OutboundLink")],1)]),s._v(" "),n("p",[n("a",{attrs:{href:"https://www.bilibili.com/video/BV1Qb411g7cz",target:"_blank",rel:"noopener noreferrer"}},[s._v("Java -Java 学习- Java 基础到高级-宋红康-零基础自学Java-尚硅谷"),n("OutboundLink")],1)]),s._v(" "),n("p",[n("a",{attrs:{href:"https://www.cnblogs.com/wanghaoyang/p/11041303.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("Java中Atomic类的使用分析"),n("OutboundLink")],1)]),s._v(" "),n("p",[s._v("锁机制")]),s._v(" "),n("p",[s._v("锁升级")]),s._v(" "),n("p",[s._v("偏向锁、轻量级锁、重量级锁")]),s._v(" "),n("p",[s._v("AQS是什么？AQS如何实现可重入锁？")]),s._v(" "),n("p",[s._v("可重入锁")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("可重入锁，也称递归锁。\n\n可以重复获取相同的锁。\nhttps://blog.csdn.net/w8y56f/article/details/89554060\n\n如果一个线程在执行一个持有锁的方法，在这个方法中调用另一个持有相同锁的方法，则该线程可以直接调用，而无需重新获取锁。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])])])}),[],!1,null,null,null);t.default=e.exports}}]);